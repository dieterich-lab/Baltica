# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for majiq.
.. usage:

"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
conditions = [x.split('_')[0] for x in NAMES]
comp_names =  ['{}_vs_{}'.format(*x) for x in combinations(set(conditions), 2)]

cond, rep = glob_wildcards("mappings/{cond}_{rep}.bam")

def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

def comparison_a(wildcards):
    condition = wildcards.comp_names.split('_vs_')[0]
    reps = [r for c, r in zip(cond, rep) if cond == condition]
    return [x for x in expand("{cond}/{cond}_{{rep}}.majiq".format(cond=cond),
        rep=reps)]

def comparison_b(wildcards):
    condition = wildcards.comp_names.split('_vs_')[1]
    reps = [r for c, r in zip(cond, rep) if cond == condition]
    return [x for x in expand("{cond}/{cond}_{{rep}}.majiq".format(cond=cond),
        rep=reps)]


def splicegraph(wildcards):
    cond = wildcards.comp_names.split('_vs_')[1]
    return 'majiq/{}/splicegraph.sql'.format(cond)


rule all:
    input:
        expand('majiq/{comp_names}/{comp_names}.deltapsi.tsv',
            comp_names=comp_names)

rule clean:
    shell:
        "rm -rf majiq"

rule create_ini:
    input: expand('mappings/{cond}_{rep}.bam', cond=cond, rep=rep)
    output: 'majiq/{cond}/{cond}.ini'
    run:
        lines = [
            '[info]',
            'readlen={}'.format(config['read_len']),
            'samdir={}'.format('mappings/'),
            'genome={}'.format(config['assembly']),
            'genome_path={}'.format(config['genome_path']),
            'strandness={}'.format(config['strandness']),
            '[experiments]',
            '{}={}'.format(wildcards.cond, ','.join([
                x for x in NAMES if wildcards.cond in x]))]

        with open(str(output), 'w') as ini:
            ini.writelines('\n'.join(lines))


rule build:
    input: rules.create_ini.output
    output: '{cond}_{rep}.majiq'
    params:
        output='majiq/{cond}',
        annotation=config['gtf_path']
    threads: 20
    shell:
        '''
        module load majiq
        majiq build --conf {input} --nproc {threads} --output {params.output} \
        {params.annotation}
        '''


rule deltapsi:
    input: comparison_a, comparison_b
    output: 'majiq/{comp_names}/{comp_names}_deltapsi.voila'
    threads: 20
    params:
        output='majiq/{comp_names}/',
        names=lambda wildcards: wildcards.comp_names.replace('_vs_', ' ')  # RNPS1 Luc
    shell:
        '''
        module load majiq
        majiq deltapsi -grp1 {input[0]} -grp2 {input[1]} \
        --nproc {threads} --output {params.output} --names {params.names}
        '''


rule voila_deltapsi:
    input: rules.deltapsi.output
    output: 'majiq/{comp_names}/{comp_names}.deltapsi.tsv'
    params:
        output='majiq/{comp_names}/',
        splicegraph=splicegraph
    shell:
        '''
        module load majiq
        voila deltapsi -o {params.output} --splice-graph \
        {params.splicegraph} {input}
        '''