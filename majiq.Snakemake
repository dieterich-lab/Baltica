# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for majiq.
.. usage:


"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
conditions = [x.split('_')[0] for x in sorted(NAMES)]
combination = combinations(set(sorted(conditions)), 2)

#localrules: all, symlink, create_ini

cond, rep = glob_wildcards("mappings/{cond}_{rep}.bam")

rule all:
    input:
        expand('majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}_majiqvoila.tsv',
            cond_a=[x[0] for x in combination],
            cond_b=[x[1] for x in combination]),
        expand('majiq/{cond}/{cond}_{rep}.majiq.hdf5', cond=cond, rep=rep)

rule clean:
    shell:
        "rm -rf majiq"

rule create_ini:
    input: expand('mappings/{cond}_{rep}.bam', cond=cond, rep=rep)
    output: 'majiq/{cond}/{cond}.ini'
    run:
        lines = [
            '[info]',
            'readlen={}'.format(config['read_len']),
            'samdir={}'.format('mappings/'),
            'genome={}'.format(config['assembly']),
            'genome_path={}'.format(config['genome_path']),
            '[experiments]',
            '{}={}'.format(wildcards.cond, ','.join([
                x for x in NAMES if wildcards.cond in x]))]

        with open(str(output), 'w') as ini:
            ini.writelines('\n'.join(lines))


rule build:
    input: rules.create_ini.output
    output: 'majiq/{cond}/{cond}_{rep}.majiq.hdf5'
    params:
        output='majiq/',
        annotation=config['gtf_path']
    threads: 20
    shell:
        '''
        module load majiq
        majiq build -conf {input} --nthreads {threads} --output \
        {params.output} {params.annotation}
        '''


rule deltapsi:
    input:
        cond_a='majiq/{cond_a}/{cond_a}.majiq.hdf5',
        cond_b='majiq/{cond_b}/{cond_b}.majiq.hdf5'
    output: 'majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}_splicegraph.hdf5',

    threads: 20
    params:
        output='majiq/{cond_a}_{cond_b}/',
        names='{cond_a} {cond_b}', # RNPS1 Luc
        cond_a='{cond_a}', # RNPS1
        cond_b='{cond_b}' # Luc
    shell:
        '''
        module load majiq
        majiq deltapsi \
        -grp1 majiq/{cond_a}/{cond_a}.majiq.hdf5 \
        -grp2 majiq/{cond_a}/{cond_b}.majiq.hdf5 \
        --nthreads {threads} \
        --output {params.output} \
        --names {params.names}
        '''


rule voila_deltapsi:
    input: rules.deltapsi.output
    output: 'majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}_majiqvoila.tsv'
    params:
        output='majiq/{cond_a}_{cond_b}/',
        splicegraph='majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}_splicegraph.hdf5'
    shell:
        '''
        module load majiq
        voila deltapsi {input} -o {params.output} --splice-graph \
        {params.splicegraph}
        '''