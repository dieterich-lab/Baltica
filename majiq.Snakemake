# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for majiq.
.. usage:


"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
conditions = [x.split('_')[0] for x in NAMES]
conditions = [x.split('_')[0] for x in sorted(NAMES)]
comp_names =  ['{}_vs_{}'.format(*x) for x in combinations(set(conditions), 2)]

localrules: all, symlink, create_ini


rule all:
    input:
        expand('majiq/{comp_names}/{comp_names}_majiqvoila.tsv',
        comp_names=comp_names)


rule clean:
    shell:
        "rm -rf majiq"


rule symlink:
    input:
        bam=expand("{SAMPLES}", SAMPLES=SAMPLES),
        bai=expand("{SAMPLES}.bai", SAMPLES=SAMPLES)
    output:
        bam=expand('mappings/{NAMES}.bam', NAMES=NAMES),
        bai=expand('mappings/{NAMES}.bam.bai', NAMES=NAMES)
    run:
        for bam_in, bai_in, bam_out, bai_out in zip(
            input.bam, input.bai, output.bam, output.bai):
            os.symlink(bam_in, bam_out)
            os.symlink(bai_in, bai_out)


rule create_ini:
    input: rules.symlink.input.bam
    output: expand('majiq/{conditions}.ini', conditions=sorted(set(conditions)))
    run:
        lines = [
            '[info]',
            'readlen={}'.format(config['read_len']),
            'samdir={}'.format('mappings/'),
            'genome={}'.format(config['assembly']),
            'genome_path={}'.format(config['genome_path']),
            '[experiments]',
            '{}={}'.format(
                wildcards.condition, ','.join([x for x in NAMES
                                               if wildcards.conditions in x]))]

        with open(str(output), 'w') as ini:
            ini.writelines('\n'.join(lines))

rule build:
    input: rules.create_ini.output
    output: 'majiq/{NAME}.majiq.hdf5'
    params:
        output='majiq/',
        annotation=config['gtf_path']
    threads: 20
    shell:
        '''
        module load majiq
        majiq build -conf {input} --nthreads {threads} --output \
        {params.output} {params.annotation}
        '''


rule deltapsi:
    input: rules.build.input
    output: 'majiq/{comp_names}/splicegraph.hdf5'
    threads: 20
    params:
        output='majiq/{comp_names}/',
        names=lambda wildcards: wildcards.comp_names.replace('_vs_', ' '), # RNPS1 Luc
        cond_a='a',
        cond_b='b'
    shell:
        '''
        module load majiq
        majiq deltapsi \
        -grp1 majiq/{comp_names}/{params.cond_a}.majiq.hdf5 \
        -grp2 majiq/{comp_names}/{params.cond_b}.majiq.hdf5 \
        --nthreads {threads} \
        --output {params.output} \
        --names {params.names}
        '''


rule voila_deltapsi:
    input: rules.deltapsi.output
    output: 'majiq/{comp_names}/{comp_names}_majiqvoila.tsv'
    params:
        output='majiq/{comp_names}/',
        splicegraph='majiq/{comp_names}/splicegraph.hdf5'
    shell:
        '''
        module load majiq
        voila deltapsi {input} -o {params.output} --splice-graph \
        {params.splicegraph}
        '''
