# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for majiq.
.. usage:
    snakemake -s majiq.Snakemake --cluster "sbatch --mem=24000" --jobs 100
"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
conditions = sorted(set([x.split('_')[0] for x in NAMES]))
comp_names =  ['{}_{}'.format(*x) for x in
               combinations(conditions, 2)]
mapping = {c: [x for x in NAMES if x.startswith(c)] for c in conditions}


def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

def comparison(wildcards, index):
    condition = wildcards.comp_names.split('_')[index]
    return expand('majiq/{cond}/{{name}}.majiq'.format(cond=condition),
        name=mapping[condition])


def splicegraph(wildcards):
    cond = wildcards.comp_names.split('_')[1]
    return 'majiq/{}/splicegraph.sql'.format(cond)


rule all:
    input:
        dynamic(expand('majiq/{cond}/{cond}_{{rep}}.majiq', cond=conditions)),
        expand('majiq/{comp_names}/{comp_names}.deltapsi.tsv',
            comp_names=comp_names)

rule clean:
    shell:
        "rm -rf majiq"

#ruleorder: create_ini > build > deltapsi > voila_deltapsi

rule create_ini:
    output: 'majiq/{cond}/{cond}.ini'
    run:
        lines = [
            '[info]',
            'readlen={}'.format(config['read_len']),
            'samdir={}'.format('mappings/'),
            'genome={}'.format(config['assembly']),
            'genome_path={}'.format(config['genome_path']),
            'strandness={}'.format(config['strandness']),
            '[experiments]',
            '{}={}'.format(
                wildcards.cond, ','.join(mapping[wildcards.cond]))]

        with open(str(output), 'w') as ini:
            ini.writelines('\n'.join(lines))

rule build:
    input: rules.create_ini.output
    output: dynamic('majiq/{cond}/{cond}_{rep}.majiq')

    params:
        output='majiq/{cond}',
        annotation=config['gtf_path']
    threads: 20
    shell:
        '''
        module load majiq
        majiq build --conf {input} --nproc {threads} --output {params.output} \
        {params.annotation}
        '''


rule deltapsi:
    input: cont=lambda wildcards: comparison(wildcards, 0),
           treat=lambda wildcards: comparison(wildcards, 1)
    output: 'majiq/{comp_names}/{comp_names}.deltapsi.voila'
    threads: 20
    params:
        output='majiq/{comp_names}/',
        names=lambda wildcards: wildcards.comp_names.replace('_', ' '),  # RNPS1 Luc
    shell:
        '''
        module load majiq
        majiq deltapsi -grp1 {input.cont} -grp2 {input.treat} \
        --nproc {threads} --output {params.output} --names {params.names}
        '''


rule voila_deltapsi:
    input: rules.deltapsi.output
    output: 'majiq/{comp_names}/{comp_names}.deltapsi.tsv'
    params:
        output='majiq/{comp_names}/',
        splicegraph=splicegraph
    shell:
        '''
        module load majiq
        voila deltapsi -o {params.output} --splice-graph \
        {params.splicegraph} {input}
        '''