# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for majiq.
.. usage:

"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
conditions = [x.split('_')[0] for x in sorted(NAMES)]
cond, rep = glob_wildcards("mappings/{cond}_{rep}.bam")
comparisons = combinations(sorted(set(conditions)), 2)
cond_a = [x[0] for x in combinations(sorted(set(conditions)), 2)]
cond_b = [x[1] for x in combinations(sorted(set(conditions)), 2)]

def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

def get_comparison(wildcards):
    for comparison in comparisons:
        cond_a, cond_b = comparison

        print('majiq/{cond_a}_{rep}.majiq'.format(cond_a=cond_a, rep=rep))
        yield ['majiq/{cond_a}_{rep}.majiq'.format(cond_a=cond_a, rep=rep),
            'majiq/{cond_b}_{rep}.majiq'.format(cond_b=cond_b, rep=rep)]

rule all:
    input:
        expand('majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}.deltapsi.tsv',
            cond_a=cond_a, cond_b=cond_b),

rule clean:
    shell:
        "rm -rf majiq"

rule create_ini:
    input: expand('mappings/{cond}_{rep}.bam', cond=cond, rep=rep)
    output: 'majiq/{cond}/{cond}.ini'
    run:
        lines = [
            '[info]',
            'readlen={}'.format(config['read_len']),
            'samdir={}'.format('mappings/'),
            'genome={}'.format(config['assembly']),
            'genome_path={}'.format(config['genome_path']),
            'strandness={}'.format(config['strandness']),
            '[experiments]',
            '{}={}'.format(wildcards.cond, ','.join([
                x for x in NAMES if wildcards.cond in x]))]

        with open(str(output), 'w') as ini:
            ini.writelines('\n'.join(lines))


rule build:
    input: rules.create_ini.output
    output: '{cond}_{rep}.majiq'
    params:
        output='majiq/{cond}',
        annotation=config['gtf_path']
    threads: 20
    shell:
        '''
        module load majiq
        majiq build --conf {input} --nproc {threads} --output {params.output} \
        {params.annotation}
        '''


rule deltapsi:
    input: get_comparison
    output: 'majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}_deltapsi.voila'
    threads: 20
    params:
        output='majiq/{cond_a}_{cond_b}/',
        names='{cond_a} {cond_b}' # RNPS1 Luc
    shell:
        '''
        module load majiq
        majiq deltapsi -grp1 {input.a} -grp2 {input.b} \
        --nproc {threads} --output {params.output} --names {params.names}
        '''


rule voila_deltapsi:
    input: rules.deltapsi.output
    output: 'majiq/{cond_a}_{cond_b}/{cond_a}_{cond_b}.deltapsi.tsv'
    params:
        output='majiq/{cond_a}_{cond_b}/',
    shell:
        '''
        module load majiq
        voila deltapsi -o {params.output} --splice-graph \
        'majiq/{cond_b}/splicegraph.sql' {input}
        '''