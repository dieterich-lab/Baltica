# -*- coding: utf-8
"""
Created on 17:07 29/02/2018 2018
Snakemake file for leafcutter.
.. usage:

create a directory, Leafcutter_results


Notes:
    They recommend Olego
    or star :
    STAR --genomeDir hg19index/
         --twopassMode Basic
         --outSAMstrandField intronMotif
         --readFilesCommand zcat
         --outSAMtype BAM Unsorted
"""
__author__ = "Thiago Britto Borges"
__copyright__ = "Copyright 2018, Dieterichlab"
__email__ = "Thiago.BrittoBorges@uni-heidelberg.de"
__license__ = "MIT"

from itertools import combinations
from pathlib import Path

def basename(path, suffix=None):
    if suffix:
        return str(Path(path).with_suffix(suffix).name)
    return str(Path(path).name)

configfile: "config.yml"
NAMES = config["samples"].keys()
SAMPLES = config["samples"].values()
bin_path = '/home/tbrittoborges/bin/leafcutter'
gtf_path = '/biodb/genomes/homo_sapiens/GRCh38_90/GRCh38.90.gtf'
conditions = [x.split('_')[0] for x in NAMES]
comp_names =  ['{}_vs_{}'.format(*x) for x in combinations(set(conditions), 2)]


rule all:
    input:
        expand('leafcutter/{comp_names}/ds_plots.pdf', comp_names=comp_names)

rule clean:
    shell:
        'rm -rf mappings junctions leafcutter'

rule symlink:
    input:
        bam=expand("{SAMPLES}", SAMPLES=SAMPLES),
        bai=expand("{SAMPLES}.bai", SAMPLES=SAMPLES)
    output:
        bam=expand('mappings/{NAMES}.bam', NAMES=NAMES),
        bai=expand('mappings/{NAMES}.bam.bai', NAMES=NAMES)
    run:
        for bam_in, bai_in, bam_out, bai_out in zip(
            input.bam, input.bai, output.bam, output.bai):
            os.symlink(bam_in, bam_out)
            os.symlink(bai_in, bai_out)

# step 1.1
rule bam2junc:
    input: 'mappings/{NAMES}.bam'
    output:
        bed='leafcutter/{NAMES}.bed',
        junc='leafcutter/{NAMES}.junc'
    params: bin_path=bin_path
    shell:
        """
        module load samtools
        samtools view {input} \
        | python2 {params.bin_path}/scripts/filter_cs.py \
        | perl {params.bin_path}/scripts/sam2bed.pl --use-RNA-strand - {output.bed}
        perl {params.bin_path}/scripts/bed2junc.pl {output.bed} {output.junc}
        """

rule concatenate:
    input: expand('leafcutter/{NAMES}.junc', NAMES=NAMES)
    output:
        junc=expand('leafcutter/{comp_names}/all.junc', comp_names=comp_names),
        test=expand('leafcutter/{comp_names}/test_diff_introns.txt',
                    comp_names=comp_names)
    run:
        comp = output.junc.split('/')[1]
        cond_a, cond_b = comp.split('_vs_')
        with open(output.junc, 'w') as fout:
            for junc_file in input:
                if junc_file.startswith(cond_a) or junc_file.startswith(cond_b):
                    fout.write(junc_file + "\n")

        with open(output.test, 'w') as fout:
            for condition in NAMES:
                if condition.startswith(cond_a):
                    fout.write("mappings/{}.bam {}\n".format(
                        condition, cond_a))

                elif condition.startswith(cond_b):
                    fout.write("mappings/{}.bam {}\n".format(
                        condition, cond_b))

# step 2
# step 1.2 m= min numb of reads a cluster, l = intro len
rule intron_clustering:
    input:
        'leafcutter/{comp_names}/all.junc'
    params:
        m=50,
        l=500000,
        prefix='leafcutter/{comp_names}/{comp_names}'
    output:
        'leafcutter/{comp_names}/{comp_names}_perind_numers.counts.gz'
    shell:
        """
        python2 {bin_path}/clustering/leafcutter_cluster.py \
        -j {input} -m {params.m} -o {params.prefix} -l {params.l}
        """

# step 3.1
rule gtf_to_exon:
    input:
        gtf_path
    output:
        a=basename(gtf_path, suffix='.gz'),
        b='exons.gtf.gz'
    shell:
        """
        gzip -c {input} > {output.a}
        module load R/3.4.1
        Rscript {bin_path}/scripts/gtf_to_exons.R {output.a} {output.b}
        """

# step 3.2
rule differential_splicing:
    input:
        a=rules.gtf_to_exon.output.b,
        b=rules.intron_clustering.output,
        c=rules.concatenate.output.test
    output:
        'leafcutter/{comp_names}/leafcutter_ds_cluster_significance.txt'
    params:
        min_samples_per_group=config.get('min_samples_per_group', ''),
        min_samples_per_intron=config.get('min_samples_per_intron', '')
    threads: 4
    shell:
        """
        module load R/3.4.1
        Rscript {bin_path}/scripts/leafcutter_ds.R --exon_file={input.a} \
        {input.b} {input.c}  --num_threads {threads} \
        {params.min_samples_per_intron} {params.min_samples_per_group}
        """

rule plot:
    input:
        exons=rules.gtf_to_exon.output.b,
        test=rules.concatenate.output.test,
        counts=rules.intron_clustering.output,
        signif=rules.differential_splicing.output,
    output:
        'leafcutter/{comp_names}/ds_plots.pdf'
    params:
        fdr=config.get('fdr', '')
    shell:
        """
        module load R/3.4.1
        Rscript {bin_path}/scripts/ds_plots.R -e {input.exons} \
        {input.counts} {input.test} {input.signif} \
        {params.fdr}"""
